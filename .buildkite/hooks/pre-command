#!/bin/bash

set -u

if [[ "$BUILDKITE_REPO" == git@github.com:muxinc/mux.git && "$BUILDKITE_AGENT_META_DATA_QUEUE" =~ ^(bazel|bazel-staging|deploy)$ ]]; then
  BAZEL_NOBLOCK_FOR_LOCK=true ./bazel.sh info > /dev/null

  # If the exit code is 9, kill the bazel server since it might be wedged
  # 9 - The server lock is held and --noblock_for_lock was passed
  # https://bazel.build/run/scripts#exit-codes
  if [[ "$?" == 9 && -f /buildout/bazel/server/server.pid.txt ]]; then
    pid=$(cat /buildout/bazel/server/server.pid.txt)

    if [ -n "$pid" ] && ps -p "$pid" > /dev/null; then
      echo "~~~ :bazel: Killing potentially wedged bazel server ($pid)"
      kill -9 "$pid"
    fi
  fi
fi

set -e

# Setup test secrets to ensure we don't overwrite them
export SECRETS_TEST_GLOBAL_EXISTS=passed
echo -n passed > secrets-test-global-exists

jwt=$(buildkite-agent oidc request-token --audience vault)
buildkite_vault_secrets="buildkite-vault-secrets -jwt $jwt"

# Test the master version of buildkite-vault-secrets on the test step
if [ "$BUILDKITE_PIPELINE_SLUG" == mux ] && [ "$BUILDKITE_STEP_KEY" == test ]; then
  buildkite_vault_secrets="./bazel.sh run //tools/buildkite-vault-secrets -- -jwt $jwt"
fi

# Split on null characters to allow for secrets with newlines
while IFS= read -r -d $'\0' env_var; do
  export "${env_var?}"
done < <($buildkite_vault_secrets)

if [ "$SECRETS_TEST_GLOBAL" != passed ]; then
  echo '--- :x: Global secrets test failed for environment variable SECRETS_TEST_GLOBAL, please notify #platform-engineering'
  exit 1
fi

if [ "$SECRETS_TEST_GLOBAL_EXISTS" != passed ]; then
  echo '--- :x: Global secrets test failed for environment variable SECRETS_TEST_GLOBAL_EXISTS, please notify #platform-engineering'
  exit 1
fi

if [ "$(cat secrets-test-global)" != passed ]; then
  echo '--- :x: Global secrets test failed for file secrets-test-global, please notify #platform-engineering'
  exit 1
fi

if [ "$(cat secrets-test-global-exists)" != passed ]; then
  echo '--- :x: Global secrets test failed for file secrets-test-global-exists, please notify #platform-engineering'
  exit 1
fi

if [ "$(cat secrets-test-global-absolute)" != passed ]; then
  echo '--- :x: Global secrets test failed for absolute file secrets-test-global-absolute, please notify #platform-engineering'
  exit 1
fi

unset SECRETS_TEST_GLOBAL SECRETS_TEST_GLOBAL_EXISTS
rm -f secrets-test-global secrets-test-global-exists secrets-test-global-absolute

if [ "$BUILDKITE_PIPELINE_SLUG" == mux ]; then
  if [ "$SECRETS_TEST_PIPELINE" != passed ]; then
    echo '--- :x: Pipeline secrets test failed for environment variable SECRETS_TEST_PIPELINE, please notify #platform-engineering'
    exit 1
  fi

  if [ "$(cat secrets-test-pipeline)" != passed ]; then
    echo '--- :x: Pipeline secrets test failed for file secrets-test-pipeline, please notify #platform-engineering'
    exit 1
  fi

  if [ "$(cat secrets-test-pipeline-absolute)" != passed ]; then
    echo '--- :x: Pipeline secrets test failed for absolute file secrets-test-pipeline-absolute, please notify #platform-engineering'
    exit 1
  fi

  unset SECRETS_TEST_PIPELINE
  rm -f secrets-test-pipeline secrets-test-pipeline-absolute

  if [ "$BUILDKITE_STEP_KEY" == test ]; then
    if [ "$SECRETS_TEST_STEP" != passed ]; then
      echo '--- :x: Step secrets test failed for environment variable SECRETS_TEST_STEP, please notify #platform-engineering'
      exit 1
    fi

    if [ "$(cat secrets-test-step)" != passed ]; then
      echo '--- :x: Step secrets test failed for file secrets-test-step, please notify #platform-engineering'
      exit 1
    fi

    if [ "$(cat secrets-test-step-absolute)" != passed ]; then
      echo '--- :x: Step secrets test failed for absolute file secrets-test-step-absolute, please notify #platform-engineering'
      exit 1
    fi

    unset SECRETS_TEST_STEP
    rm -f secrets-test-step secrets-test-step-absolute
  fi
fi
